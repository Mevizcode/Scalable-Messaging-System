version: "3"
services:
  app:
    build: .
    container_name: messaging_system
    env_file: ./.env.dev
    ports:
      - ${PORT}:${PORT}
    environment:
      - PORT=${PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_PORT=${DB_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      app-network:
    restart: unless-stopped

  #postgres service
  db:
    image: postgres:latest
    container_name: postgres-db
    env_file: ./.env.dev
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  #redis service
  redis:
    image: redis:latest
    container_name: redis-server
    env_file: ./.env.dev
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
    name: my-app-network
    driver: bridge
    attachable: true
